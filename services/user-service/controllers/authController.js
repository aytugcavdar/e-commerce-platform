const User = require('../models/User');
const {
  middleware: { asyncHandler },
  helpers: { ResponseFormatter, TokenHelper, CookieHelper, CloudinaryHelper, EmailHelper, PasswordUtils },
  constants: { httpStatus, errorMessages },
  logger,
} = require('@ecommerce/shared-utils');

class AuthController {
  static register = asyncHandler(async (req, res) => {
    const { firstName, lastName, email, password, phone } = req.body;
    
    // Mevcut kullanÄ±cÄ± kontrolÃ¼
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(httpStatus.CONFLICT).json(
        ResponseFormatter.error('Bu e-posta zaten kayÄ±tlÄ±', httpStatus.CONFLICT)
      );
    }

    let avatarUrl;

    // Avatar yÃ¼kleme
    if (req.file) {
      try {
        const result = await CloudinaryHelper.uploadImage(req.file.path, 'avatars');
        avatarUrl = result.secure_url;
        logger.info('Avatar yÃ¼klendi:', avatarUrl);
      } catch (error) {
        logger.error('Avatar yÃ¼klenirken hata oluÅŸtu:', error);
        return res.status(httpStatus.INTERNAL_SERVER_ERROR).json(
          ResponseFormatter.error('Avatar yÃ¼klenirken hata oluÅŸtu', httpStatus.INTERNAL_SERVER_ERROR)
        );
      }
    }

    // DoÄŸrulama tokeni oluÅŸtur
    const verificationToken = TokenHelper.createVerificationToken();

    // KullanÄ±cÄ± oluÅŸtur
    const user = new User({
      firstName,
      lastName,
      email,
      password,
      phone,
      avatarUrl,
      emailVerificationToken: verificationToken.hashedToken,
      emailVerificationExpires: verificationToken.expires,
    });

    await user.save();

    // DoÄŸrulama e-postasÄ± gÃ¶nder
    try {
      const verificationUrl = `${process.env.CLIENT_URL || 'http://localhost:5173'}/verify-email?token=${verificationToken.rawToken}`;
      const emailTemplate = EmailHelper.getWelcomeEmailTemplate(user, verificationUrl);
      
      await EmailHelper.sendEmail({
        email: user.email,
        subject: 'ðŸŽ‰ HoÅŸ Geldiniz! E-postanÄ±zÄ± DoÄŸrulayÄ±n',
        message: emailTemplate.text,
        html: emailTemplate.html
      });
      
      logger.info('DoÄŸrulama e-postasÄ± gÃ¶nderildi:', user.email);
    } catch (error) {
      logger.error('DoÄŸrulama e-postasÄ± gÃ¶nderilirken hata oluÅŸtu:', error);
      // E-posta hatasÄ± kullanÄ±cÄ± kaydÄ±nÄ± engellemez
    }

    res.status(httpStatus.CREATED).json(
      ResponseFormatter.success(
        user.toJSON(),
        'KayÄ±t baÅŸarÄ±lÄ±! HesabÄ±nÄ±zÄ± aktifleÅŸtirmek iÃ§in lÃ¼tfen e-posta adresinize gÃ¶nderilen doÄŸrulama baÄŸlantÄ±sÄ±na tÄ±klayÄ±n.'
      )
    );
  });

  static login = asyncHandler(async (req, res) => {
    const { email, password } = req.body;

    const user = await User.findOne({ email }).select('+password +loginAttempts +lockUntil');
    
    if (!user) {
      return res.status(httpStatus.UNAUTHORIZED).json(
        ResponseFormatter.error('GeÃ§ersiz e-posta veya ÅŸifre', httpStatus.UNAUTHORIZED)
      );
    }

    // Hesap kilidi kontrolÃ¼
    if (user.isLocked) {
      const remainingTime = user.lockUntil 
        ? Math.ceil((user.lockUntil - Date.now()) / 1000 / 60) 
        : 0;
      const lockMessage = remainingTime > 0 
        ? `HesabÄ±nÄ±z kilitlendi. ${remainingTime} dakika sonra tekrar deneyin.`
        : 'HesabÄ±nÄ±z kilitlendi. LÃ¼tfen daha sonra tekrar deneyin.';
      
      return res.status(httpStatus.FORBIDDEN).json(
        ResponseFormatter.error(lockMessage, httpStatus.FORBIDDEN)
      );
    }

    // Åžifre kontrolÃ¼
    const isPasswordMatch = await PasswordUtils.compare(password, user.password);
    
    if (!isPasswordMatch) {
      await user.handleFailedLogin();
      return res.status(httpStatus.UNAUTHORIZED).json(
        ResponseFormatter.error(errorMessages.INVALID_CREDENTIALS, httpStatus.UNAUTHORIZED)
      );
    }

    // E-posta doÄŸrulama kontrolÃ¼
    if (!user.isEmailVerified) {
      return res.status(httpStatus.FORBIDDEN).json(
        ResponseFormatter.error(errorMessages.EMAIL_NOT_VERIFIED, httpStatus.FORBIDDEN, {
          needsEmailVerification: true,
          email: user.email
        })
      );
    }

    // BaÅŸarÄ±lÄ± giriÅŸ
    await user.resetLoginAttempts();

    logger.info(`KullanÄ±cÄ± giriÅŸ yaptÄ±: ${user.email}`);

    // Token oluÅŸtur ve cookie'lere ekle
    CookieHelper.sendTokensResponse(res, user);
  });

  static logout = asyncHandler(async (req, res) => {
    CookieHelper.clearAllAuthCookies(res);
    res.status(httpStatus.OK).json(
      ResponseFormatter.success(null, 'Ã‡Ä±kÄ±ÅŸ baÅŸarÄ±lÄ±')
    );
  });

  static verifyEmail = asyncHandler(async (req, res) => {
    const { token } = req.query;
    const { email } = req.body;

    if (!token || !email) {
      return res.status(httpStatus.BAD_REQUEST).json(
        ResponseFormatter.error('Token ve e-posta gerekli', httpStatus.BAD_REQUEST)
      );
    }

    // Token'Ä± hash'le ve veritabanÄ±nda ara
    const hashedToken = TokenHelper.hashToken(token);

    const user = await User.findOne({ 
      email,
      emailVerificationToken: hashedToken,
      emailVerificationExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(httpStatus.UNAUTHORIZED).json(
        ResponseFormatter.error('GeÃ§ersiz veya sÃ¼resi dolmuÅŸ doÄŸrulama tokeni', httpStatus.UNAUTHORIZED)
      );
    }

    // E-postayÄ± doÄŸrula
    user.isEmailVerified = true;
    user.emailVerificationToken = undefined;
    user.emailVerificationExpires = undefined;

    await user.save({ validateBeforeSave: false });
    
    logger.info(`KullanÄ±cÄ± e-posta doÄŸrulandÄ±: ${user.email}`);
    
    res.status(httpStatus.OK).json(
      ResponseFormatter.success(
        { verified: true }, 
        'E-posta adresiniz baÅŸarÄ±yla doÄŸrulandÄ±! Åžimdi giriÅŸ yapabilirsiniz.'
      )
    );
  });

  static forgotPassword = asyncHandler(async (req, res) => {
    const { email } = req.body;
    
    const user = await User.findOne({ email });
    
    // GÃ¼venlik: KullanÄ±cÄ± olmasa bile baÅŸarÄ±lÄ± mesajÄ± ver (enumeration saldÄ±rÄ±larÄ±nÄ± Ã¶nlemek iÃ§in)
    if (!user) {
      logger.warn(`Åžifre sÄ±fÄ±rlama denemesi - kullanÄ±cÄ± bulunamadÄ±: ${email}`);
      return res.status(httpStatus.OK).json(
        ResponseFormatter.success(null, 'EÄŸer bu e-posta kayÄ±tlÄ±ysa, ÅŸifre sÄ±fÄ±rlama baÄŸlantÄ±sÄ± gÃ¶nderildi.')
      );
    }

    // Åžifre sÄ±fÄ±rlama tokeni oluÅŸtur
    const resetToken = TokenHelper.createPasswordResetToken();
    user.passwordResetToken = resetToken.hashedToken;
    user.passwordResetExpires = resetToken.expires;
    await user.save({ validateBeforeSave: false });

    // Åžifre sÄ±fÄ±rlama e-postasÄ± gÃ¶nder
    try {
      const resetUrl = `${process.env.CLIENT_URL || 'http://localhost:5173'}/reset-password?token=${resetToken.rawToken}`;
      const emailTemplate = EmailHelper.getPasswordResetEmailTemplate(user, resetUrl);
      
      await EmailHelper.sendEmail({
        email: user.email,
        subject: 'Åžifre SÄ±fÄ±rlama',
        message: emailTemplate.text,
        html: emailTemplate.html
      });
      
      logger.info(`Åžifre sÄ±fÄ±rlama tokeni oluÅŸturuldu: ${user.email}`);
    } catch (error) {
      logger.error('Åžifre sÄ±fÄ±rlama e-postasÄ± gÃ¶nderilemedi:', error);
      // E-posta hatasÄ± olsa bile kullanÄ±cÄ±ya baÅŸarÄ±lÄ± mesaj dÃ¶n (gÃ¼venlik iÃ§in)
    }

    res.status(httpStatus.OK).json(
      ResponseFormatter.success(null, 'EÄŸer bu e-posta kayÄ±tlÄ±ysa, ÅŸifre sÄ±fÄ±rlama baÄŸlantÄ±sÄ± gÃ¶nderildi.')
    );
  });

  static resendVerificationEmail = asyncHandler(async (req, res) => {
    const { email } = req.body;
    
    const user = await User.findOne({ email });
    
    if (!user) {
      return res.status(httpStatus.NOT_FOUND).json(
        ResponseFormatter.error('KullanÄ±cÄ± bulunamadÄ±', httpStatus.NOT_FOUND)
      );
    }

    if (user.isEmailVerified) {
      return res.status(httpStatus.OK).json(
        ResponseFormatter.success(null, 'E-posta zaten doÄŸrulanmÄ±ÅŸ')
      );
    }

    // E-posta doÄŸrulama tokeni oluÅŸtur
    const verificationToken = TokenHelper.createEmailVerificationToken();
    user.emailVerificationToken = verificationToken.hashedToken;
    user.emailVerificationExpires = verificationToken.expires;
    await user.save({ validateBeforeSave: false });

    // DoÄŸrulama e-postasÄ± gÃ¶nder
    try {
      const verificationUrl = `${process.env.CLIENT_URL || 'http://localhost:5173'}/verify-email?token=${verificationToken.rawToken}`;
      const emailTemplate = EmailHelper.getEmailVerificationTemplate(user, verificationUrl);
      
      await EmailHelper.sendEmail({
        email: user.email,
        subject: 'E-posta DoÄŸrulama',
        message: emailTemplate.text,
        html: emailTemplate.html
      });
      
      logger.info(`E-posta doÄŸrulama tokeni yeniden gÃ¶nderildi: ${user.email}`);
    } catch (error) {
      logger.error('E-posta gÃ¶nderilemedi:', error);
      return res.status(httpStatus.INTERNAL_SERVER_ERROR).json(
        ResponseFormatter.error('E-posta gÃ¶nderilemedi. LÃ¼tfen tekrar deneyin.', httpStatus.INTERNAL_SERVER_ERROR)
      );
    }

    res.status(httpStatus.OK).json(
      ResponseFormatter.success(null, 'E-posta doÄŸrulama baÄŸlantÄ±sÄ± gÃ¶nderildi!')
    );
  });

  static resetPassword = asyncHandler(async (req, res) => {
    const { token } = req.query;
    const { email, password } = req.body;

    if (!token || !email || !password) {
      return res.status(httpStatus.BAD_REQUEST).json(
        ResponseFormatter.error('Token, e-posta ve ÅŸifre gerekli', httpStatus.BAD_REQUEST)
      );
    }

    // Token'Ä± hash'le ve kullanÄ±cÄ±yÄ± bul
    const hashedToken = TokenHelper.hashToken(token);

    const user = await User.findOne({
      email,
      passwordResetToken: hashedToken,
      passwordResetExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(httpStatus.UNAUTHORIZED).json(
        ResponseFormatter.error('GeÃ§ersiz veya sÃ¼resi dolmuÅŸ ÅŸifre sÄ±fÄ±rlama tokeni', httpStatus.UNAUTHORIZED)
      );
    }

    // Yeni ÅŸifreyi kaydet
    user.password = password;
    user.passwordResetToken = undefined;
    user.passwordResetExpires = undefined;
    await user.save();

    logger.info(`Åžifre sÄ±fÄ±rlandÄ±: ${user.email}`);

    res.status(httpStatus.OK).json(
      ResponseFormatter.success(null, 'Åžifreniz baÅŸarÄ±yla sÄ±fÄ±rlandÄ±! Åžimdi giriÅŸ yapabilirsiniz.')
    );
  });
}

module.exports = AuthController;